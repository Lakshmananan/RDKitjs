'use strict';

require('should');

var RDKit = require('../rdkit');

beforeEach(async () => {
  await RDKit;
  console.log('resolved');
});

describe.only('RDKit loading', function() {
  it('JS functions Hello', function() {
    RDKit.hello.should.equal('world');
  });
});

// static constructors
//    newmolecule();
describe('Molecule Creations', function() {
  it('Murko', function() {
    var smi = 'C1CCCC1OC(CO)';
    var murcko = RDKit.Molecule.MurckofromSmiles(smi);
    murcko
      .toMolfile()
      .should.equal(
        '\n     RDKit          \n\n  5  5  0  0  0  0  0  0  0  0999 V2000\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  1  1  0\nM  END\n$$$$\n'
      );
    murcko.delete();
  });

  it.skip('Mol2BlockToMol', function() {
    var molBlock = '';
    var mol = RDKit.Molecule.Mol2BlockToMol(molBlock);
    mol.toMolfile().should.equal();
    mol.delete();
  });

  it('MolBlockToMol', function() {
    var molBlock =
      '\n     RDKit          \n\n  9  9  0  0  0  0  0  0  0  0999 V2000\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\n  5  1  1  0\nM  END\n$$$$\n';
    var mol = RDKit.Molecule.MolBlockToMol(molBlock);
    mol.toSmiles().should.equal('OCCOC1CCCC1');
    mol.delete();
  });

  it('fromSmarts', function() {
    var smarts = '[NX3,NX4+][CX3](=[OX1])[OX2H,OX1-]';
    var mol = RDKit.Molecule.fromSmarts(smarts);
    mol
      .toMolfile()
      .should.equal(
        '\n     RDKit          \n\n  4  3  0  0  0  0  0  0  0  0999 V2000\n    0.0000    0.0000    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  6  0\n  2  3  2  0\n  2  4  6  0\nV    1 [N&X3,N&X4&+]\nV    2 [C&X3]\nV    3 [O&X1]\nV    4 [O&X2&H1,O&X1&-]\nM  END\n$$$$\n'
      );
    mol.delete();
  });

  it('fromSmiles', function() {
    var smi = 'C1CCCC1OC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol
      .toMolfile()
      .should.equal(
        '\n     RDKit          \n\n  9  9  0  0  0  0  0  0  0  0999 V2000\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\n  5  1  1  0\nM  END\n$$$$\n'
      );
    mol.delete();
  });

  it('molFromPickle', function() {
    var pickle =
      'ï¾­Þ\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\u0006\u0000`\u0000\u0000\u0000\u0003\u0001\b\u0000 \u0000\u0000\u0000\u0002\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\b\u0000`\u0000\u0000\u0000\u0001\u0001\u000b\u0000\u0001\u0000\u0001\u0002\u0000\u0002\u0003\u0000\u0003\u0004\u0000\u0004\u0005\u0000\u0005\u0006\u0000\u0006\u0007\u0000\u0007\b\u0000\u0004\u0000\u0000\u0014\u0001\u0005\u0000\u0001\u0002\u0003\u0004\u0017\u0000\u0000\u0000\u0000\u0016';
    var mol = RDKit.Molecule.molFromPickle(pickle);
    mol
      .toMolfile()
      .should.equal(
        '\n     RDKit          \n\n  9  9  0  0  0  0  0  0  0  0999 V2000\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\n  5  1  1  0\nM  END\n$$$$\n'
      );
    mol.delete();
  });

  // Pickle molecule representation
  it('MolToBinary', function() {
    var smi = 'C1CCCC1OC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    var p = mol.MolToBinary();
    p.should.equal(
      'ï¾­Þ\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\u0006\u0000`\u0000\u0000\u0000\u0003\u0001\b\u0000 \u0000\u0000\u0000\u0002\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\b\u0000`\u0000\u0000\u0000\u0001\u0001\u000b\u0000\u0001\u0000\u0001\u0002\u0000\u0002\u0003\u0000\u0003\u0004\u0000\u0004\u0005\u0000\u0005\u0006\u0000\u0006\u0007\u0000\u0007\b\u0000\u0004\u0000\u0000\u0014\u0001\u0005\u0000\u0001\u0002\u0003\u0004\u0017\u0000\u0000\u0000\u0000\u0016'
    );
    mol.delete();
  });
});

describe('Compute all descriptors', function() {
  it('calc_all_desc', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    var c = RDKit.calc_all_desc(mol);
    c = JSON.stringify(c);
    c.should.eql(
      '{"mw":132,"exactMW":132.115029752,"formula":"C7H16O2","frsp3":1,"mqn":[7,0,0,0,0,0,0,0,0,2,0,9,8,0,0,0,0,0,6,4,2,1,1,0,0,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"peovsa":[9.843390348640755,0,0,0,0,19.765380445542643,6.4208216229260096,6.606881964512918,13.213763929025836,0,0,0,0,0],"smrvsa":[9.843390348640755,0,0,0,26.186202068468653,19.820645893538753,0,0,0,0],"tpsa":29.46,"slogpvsa":[0,24.927173288379457,4.736862953800049,0,26.186202068468653,0,0,0,0,0,0,0],"logp":1.1855,"mr":37.42979999999999,"labuteASA":56.83668269591208,"lipinskiHBD":1,"lipinskiHBA":2,"numHeterocycles":0,"numRings":0,"numHeteroatoms":2,"numHBA":2,"numHBD":1,"numAliphaticCarbocycles":0,"numAliphaticHeterocycles":0,"numSaturatedCarbocycles":0,"numSaturatedHeterocycles":0,"numAliphaticRings":0,"numAromaticRings":0,"numSaturatedRings":0,"numAmideBonds":0,"numRotatableBonds":6,"numAromaticHeterocycles":0,"chi0n":6.098102573083107,"chi1n":3.6006848163930116,"chi2n":2.043086014632321,"chi3n":1.1278531854030205,"chi4n":0.6207359402846874,"chi0v":6.098102573083107,"chi1v":3.6006848163930116,"chi2v":2.043086014632321,"chi3v":1.1278531854030205,"chi4v":0.6207359402846874,"kappa1":8.92,"kappa2":7.919999999999998,"kappa3":7.920000000000001,"hallKierAlpha":-0.08}'
    );
    mol.delete();
  });

  it('getCrippenAtomContribs', function() {
    var smi = 'CO';
    var mol = RDKit.Molecule.fromSmiles(smi);
    var cp = mol.getCrippenAtomContribs();
    var LP = [];
    for (i = 0; i < cp.size() / 2; i++) {
      LP.push(cp.get(i));
    }
    var MR = [];
    for (i = cp.size() / 2; i < cp.size(); i++) {
      MR.push(cp.get(i));
    }
    LP.should.eql([-0.2035, -0.2893]);
    MR.should.eql([2.753, 0.8238]);

    mol.delete();
  });

  it('getTPSAAtomContribs', function() {
    var smi = 'CCCCCOC';
    var mol = RDKit.Molecule.fromSmiles(smi);
    var cp = mol.getTPSAAtomContribs();
    var TPSA = [];
    for (i = 0; i < cp.size(); i++) {
      TPSA.push(cp.get(i));
    }
    TPSA.should.eql([0, 0, 0, 0, 0, 9.23, 0]);
    mol.delete();
  });

  it('getASAContribs', function() {
    var smi = 'CCC';
    var mol = RDKit.Molecule.fromSmiles(smi);
    var cp = mol.getASAContribs();
    var ASA = [];
    for (i = 0; i < cp.size(); i++) {
      ASA.push(cp.get(i));
    }
    ASA.should.eql([6.923737199690624, 6.4208216229260096, 6.923737199690624]);
    mol.delete();
  });
});

describe('FingerPrints', function() {
  it('getRDKFP', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol
      .getRDKFP()
      .should.equal(

      );
    mol.delete();
  });

  it('getMorganFP', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol
      .getMorganFP(2, 2048)
      .should.equal(

      );
    mol.delete();
  });

  it('getMorganFP_GetOnBits', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    var mpf2 = mol.getMorganFP_GetOnBits(2, 2048);
    var mpf = [];
    var mpflen = mpf2.size();
    for (var j = 0; j < mpflen; j++) {
      mpf.push(mpf2.get(j));
    }
    mpf.should.eql([
      13,
      80,
      222,
      294,
      473,
      591,
      691,
      695,
      794,
      807,
      1057,
      1069,
      1249,
      1325,
      1369,
      1444,
      1911,
      1992
    ]);
    mol.delete();
  });

  it('getMorganFPlist', function() {
    var mol = RDKit.Molecule.fromSmiles('CCCC(CO)CCO');
    var u = mol.getMorganFPlist(2);
    var fplen = u.size();
    var v = [];
    for (i = 0; i < fplen; i++) {
      v[i] = u.get(i);
    }
    v.should.eql([
      203616823,
      383026682,
      864662311,
      1173125914,
      1329401632,
      1535166686,
      1583799011,
      2245273601,
      2245384272,
      2246728737,
      2512115163,
      2650223913,
      3098934668,
      3542456614,
      4022716898,
      4023654873,
      4264564392,
      1,
      1,
      2,
      1,
      1,
      2,
      2,
      1,
      5,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1
    ]);
    mol.delete();
  });

  it.skip('getMorganFP_getNonzeroElements', function() {
    var mol = RDKit.Molecule.fromSmiles('CCCC(CO)CCO');
    var f = mol.getMorganFP_getNonzeroElements(2);
    var p = [];
    for (i = 0; i < f.size(); i++) {
      p.push(f.get(i));
    }
    p.should.eql();
    mol.delete();
  });

  it('getHashedAtomPairFingerprintAsBitVect', function() {
    var mol = RDKit.Molecule.fromSmiles(
      'COc1cccc2cc(C(=O)NCCCCN3CCN(c4cccc5nccnc54)CC3)oc21'
    );
    var e = mol.getHashedAtomPairFingerprintAsBitVect(2048, 0, 1);
    e.should.eql(

    );
    mol.delete();
  });

  it('getAtomCode', function() {
    var mol = RDKit.Molecule.fromSmiles(
      'COc1cccc2cc(C(=O)NCCCCN3CCN(c4cccc5nccnc54)CC3)oc21'
    );
    var d = mol.getAtomCode(0);
    d.should.eql(33);
    mol.delete();
  });

  it('getAtomPairFingerprint', function() {
    var mol = RDKit.Molecule.fromSmiles('C1CCCC1CO');
    var f = mol.getAtomPairFingerprint();
    var p = [];
    for (i = 0; i < f.size(); i++) {
      p.push(f.get(i));
    }
    p.should.eql([
      558145,
      558146,
      558147,
      574529,
      574530,
      1590337,
      1590339,
      1590340,
      1590370,
      3,
      5,
      2,
      3,
      2,
      1,
      2,
      2,
      1
    ]);
    mol.delete();
  });

  it('getLayeredFP', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol
      .getLayeredFP(2, 2, 2048)
      .should.equal(

      );
    mol.delete();
  });

  it('getMACCSFP', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol
      .getMACCSFP()
      .should.equal(
        '00000000000000000000000000000000000000000000000000000000000000000000000010000000001000100001000000000000100011000011101000000010110010000011000000010000010101011000100'
      );
    mol.delete();
  });

  it('getPatternFP', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol
      .getPatternFP()
      .should.equal(

      );
    mol.delete();
  });
});

// playing with conformers
describe('Conformers count & access', function() {
  it.skip('getConformer', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.addHs();
    mol.EmbedMultipleConfsarg(3, 100, 2015);
    mol.getConformer(1).should.equal();
    mol.delete();
  });

  it('getNumAtoms', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.getNumAtoms().should.equal(9);
    mol.delete();
  });

  it('getAtomNeighbors', function() {
    var smi = 'C(C)C(CCC)CCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    var p = mol.getAtomNeighbors(3);
    var e = [];
    for (var j = 0; j < p.size(); j++) {
      e.push(p.get(j));
    }
    e.should.eql([2, 4]);
    mol.delete();
  });

  it('getBondNeighbors', function() {
    var smi = 'C(C)C(CCC)CCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    var p = mol.getBondNeighbors(3);
    var e = [];
    for (var j = 0; j < p.size(); j++) {
      e.push(p.get(j));
    }

    e.should.eql([1, 1]);
    mol.delete();
  });

  it('getNumConformers', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.addHs();
    mol.EmbedMultipleConfsarg(3, 100, 2015);
    mol.getNumConformers().should.equal(3);
    mol.delete();
  });
});

// align molecules or conformers
describe('Molecule AlignMol method', function() {
  it('in a list of conformers', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.addHs();
    mol.EmbedMultipleConfsarg(3, 100, 2015);

    //console.log(mol.sdwriteConfs());
    mol.AlignMolConformers();
    //console.log(mol.sdwriteConfs());

    mol.delete();
    // to do return the aligned score !!!!
    console.log('done');
  });

  it('Mol vs Ref', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.AlignMol('CCCCC').should.eql(0.3789185721593953);
    // to do return the 2 molecules aligned!
    mol.delete();
  });

  it('RMS value of conformers', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.addHs();
    mol.EmbedMultipleConfsarg(10, 100, 2015);
    mol.AlignMolConformers();
    var p = mol.getConformersRMS(1, 2, 50);

    var plen = p.size();
    var e = [];
    for (var j = 0; j < plen; j++) {
      e.push(p.get(j));
    }
    console.log(e);
    // to do return the 2 molecules aligned!
    mol.delete();
  });
});

// 3D Force Field minimization
describe('3D Force Field minimization', function() {
  it('MMFFoptimizeMolecule', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.addHs();
    mol.EmbedMolecule();
    mol.MMFFoptimizeMolecule();
    mol.removeHs();
    mol
      .toMolfile()
      .should.equal(
        '\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n   -3.1318   -1.8240    0.0542 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.0336   -0.3800   -0.4132 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.7232   -0.0595   -1.1352 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.4940   -0.1565   -0.2313 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.7737    0.2734   -0.9678 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.9353    0.0671   -0.1633 O   0  0  0  0  0  0  0  0  0  0  0  0\n    2.1547    1.1165    0.7884 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.4473    0.8050    1.5361 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.5342    0.7467    0.6134 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n'
      );
    mol.delete();
  });

  it('MMFFoptimizeMolecule with paramaters', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.addHs();
    mol.EmbedMolecule();
    mol.MMFFoptimizeMoleculearg(1000, 'MMFF94');
    mol.removeHs();
    mol
      .toMolfile()
      .should.equal(
        '\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n   -4.2225   -0.1660   -0.0329 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.8088   -0.0324   -0.5763 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.7651   -0.3593    0.4915 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.3459   -0.2244   -0.0585 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.6998   -0.5507    1.0053 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.0181   -0.5368    0.4565 O   0  0  0  0  0  0  0  0  0  0  0  0\n    2.5706    0.7818    0.3525 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.9897    0.6511   -0.1915 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.7752   -0.1392    0.6999 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n'
      );
    mol.delete();
  });

  it('MMFFOptimizeMoleculeConfs', function() {
    var smi = 'CCCCCOC(CO)';
    this.timeout(50000);

    /*
        for (var i=0;i<100;i++){
            var mol = RDKit.Molecule.fromSmiles(smi);  
            mol.addHs(); 
            mol.EmbedMultipleConfsarg(2,200,2015);   
            mol.MMFFOptimizeMoleculeConfs(8,200,'MMFF94');
            process.stdout.write('.');
            mol.delete();
        }
        */

    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.addHs();
    mol.EmbedMultipleConfsarg(3, 1000, 2015);
    mol.MMFFOptimizeMoleculeConfs(8, 1000, 'MMFF94');
    mol.removeHs();
    mol
      .sdwriteConfs()
      .should.equal(
        '\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n    4.2049   -0.1343   -0.0700 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.7636    0.1674   -0.4518 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.8530    0.1802    0.7765 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.4134    0.5914    0.4625 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.3280   -0.4062   -0.4258 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.6681    0.0257   -0.6665 O   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.5743   -0.3641    0.3649 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.9713    0.1350    0.0157 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -4.8966   -0.2437    1.0272 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n   -3.8544   -0.0601   -0.7140 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.0532    1.0931   -0.1298 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.7683    0.6501    0.5730 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.7396    0.0371   -0.3759 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.5628   -0.2933    0.3465 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.4641   -0.8645   -0.6010 O   0  0  0  0  0  0  0  0  0  0  0  0\n    2.7225   -1.2189   -0.0276 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.6792   -0.0304    0.0174 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.9275   -0.4269    0.5719 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n   -3.4103    0.9186   -0.5602 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.9693    0.3926    0.7969 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.9105   -0.7087    0.7105 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.5777   -0.2243    0.1392 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.4764   -1.3299    0.1717 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.6805   -0.9212   -0.4768 O   0  0  0  0  0  0  0  0  0  0  0  0\n    2.5109   -0.0983    0.3386 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.8150    0.1867   -0.3998 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.6449    1.0642    0.3526 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n'
      );
    mol.delete();
  });

  it('UFFOptimizeMolecule', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.addHs();
    mol.EmbedMolecule();
    mol.UFFOptimizeMolecule();
    mol.removeHs();
    mol
      .toMolfile()
      .should.equal(
        '\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n   -3.4083    0.8048   -0.3623 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.1076   -0.6782   -0.1469 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.8510   -0.9123    0.7056 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.5574   -0.5506   -0.0391 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.6776   -0.9097    0.7933 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.8559   -0.6239    0.0628 O   0  0  0  0  0  0  0  0  0  0  0  0\n    2.3833    0.6312    0.4415 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.5602    0.9786   -0.4611 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.5719    0.0215   -0.3126 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n'
      );
    mol.delete();
  });

  it('EmbedMolecule', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.addHs();
    mol.EmbedMoleculearg(1000, 1);
    mol.removeHs();
    mol
      .toMolfile()
      .should.equal(
        '\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n   -3.4616    1.4289    0.4314 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.9477    0.0284    0.1317 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.4668    0.0949   -0.1176 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.8657   -1.2686    0.0740 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.6165   -1.2723   -0.1495 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.2728   -0.1862    0.4022 O   0  0  0  0  0  0  0  0  0  0  0  0\n    2.6359   -0.3660    0.1169 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.3801    0.9281    0.0006 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.5567    0.7909    0.7537 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n'
      );
    mol.delete();
  });
});

describe('Strings - 2D - Drawing:', function() {
  it('smilewrite', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.toSmiles().should.equal('CCCCCOCCO');
    mol.delete();
  });

  it('sdwriteConfs', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.addHs();
    mol.EmbedMultipleConfsarg(3, 1000, 2015);
    mol
      .sdwriteConfs()
      .should.equal(
        '\n     RDKit          3D\n\n 25 24  0  0  0  0  0  0  0  0999 V2000\n    3.9840    0.1254   -0.2476 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.4817   -0.0129   -0.4820 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.8254    0.1570    0.8479 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.3452    0.0574    0.8647 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.2735   -0.7012   -0.2616 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.3948    0.0027   -0.7319 O   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.3754   -0.0696    0.2499 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.7151    0.4002   -0.2556 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -4.6855   -0.2127    0.5440 O   0  0  0  0  0  0  0  0  0  0  0  0\n    4.3140   -0.7630    0.3470 H   0  0  0  0  0  0  0  0  0  0  0  0\n    4.5389    0.2440   -1.1883 H   0  0  0  0  0  0  0  0  0  0  0  0\n    4.0917    0.9917    0.4463 H   0  0  0  0  0  0  0  0  0  0  0  0\n    2.3664   -1.0336   -0.9132 H   0  0  0  0  0  0  0  0  0  0  0  0\n    2.2266    0.7769   -1.2202 H   0  0  0  0  0  0  0  0  0  0  0  0\n    2.1107    1.1721    1.2215 H   0  0  0  0  0  0  0  0  0  0  0  0\n    2.3086   -0.5571    1.5514 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.1332    1.0649    0.9630 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0585   -0.4749    1.8083 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.6698   -1.6968    0.0629 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.3651   -0.8524   -1.1388 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.1166    0.4793    1.1669 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.4950   -1.1513    0.5010 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.8321    1.5065   -0.1774 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.8780    0.1498   -1.3316 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -5.4477    0.3974    0.6318 H   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\n  1 10  1  0\n  1 11  1  0\n  1 12  1  0\n  2 13  1  0\n  2 14  1  0\n  3 15  1  0\n  3 16  1  0\n  4 17  1  0\n  4 18  1  0\n  5 19  1  0\n  5 20  1  0\n  7 21  1  0\n  7 22  1  0\n  8 23  1  0\n  8 24  1  0\n  9 25  1  0\nM  END\n$$$$\n\n     RDKit          3D\n\n 25 24  0  0  0  0  0  0  0  0999 V2000\n   -3.9848    0.3867   -0.4439 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.5115    0.7744   -0.3701 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.8420   -0.2667    0.4844 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.7777   -0.9402   -0.3676 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.5651   -0.6601    0.2538 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.4788   -0.1226   -0.6508 O   0  0  0  0  0  0  0  0  0  0  0  0\n    2.7468   -0.4783   -0.2026 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.4842    0.7826    0.2082 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.8421    0.5349   -0.0503 O   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.9794   -0.7138   -0.6485 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -4.4952    0.9656   -1.2331 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -4.4249    0.5255    0.5621 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.0972    0.7996   -1.4101 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.4076    1.8040    0.0178 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.3847    0.2562    1.3599 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.5462   -1.0109    0.9036 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.9971   -2.0369   -0.3822 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.8284   -0.6078   -1.4156 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.4756    0.0879    1.0816 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.9301   -1.6111    0.7109 H   0  0  0  0  0  0  0  0  0  0  0  0\n    3.2646   -0.9441   -1.0724 H   0  0  0  0  0  0  0  0  0  0  0  0\n    2.7159   -1.1803    0.6581 H   0  0  0  0  0  0  0  0  0  0  0  0\n    3.1126    1.6451   -0.3759 H   0  0  0  0  0  0  0  0  0  0  0  0\n    3.3004    0.9868    1.2741 H   0  0  0  0  0  0  0  0  0  0  0  0\n    5.3607    1.0236    0.6249 H   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\n  1 10  1  0\n  1 11  1  0\n  1 12  1  0\n  2 13  1  0\n  2 14  1  0\n  3 15  1  0\n  3 16  1  0\n  4 17  1  0\n  4 18  1  0\n  5 19  1  0\n  5 20  1  0\n  7 21  1  0\n  7 22  1  0\n  8 23  1  0\n  8 24  1  0\n  9 25  1  0\nM  END\n$$$$\n\n     RDKit          3D\n\n 25 24  0  0  0  0  0  0  0  0999 V2000\n   -3.7097    0.3392   -0.4066 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.8809    0.4861    0.8390 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.6251   -0.3382    0.7994 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.5627    0.2268   -0.1067 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.4034   -0.9171   -0.3938 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.6352   -0.4745   -0.8353 O   0  0  0  0  0  0  0  0  0  0  0  0\n    2.4370   -0.0264    0.2199 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.9086   -0.1163   -0.1239 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.6121    0.4214    0.9612 O   0  0  0  0  0  0  0  0  0  0  0  0\n   -4.7582    0.6227   -0.1885 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.3440    0.9860   -1.2185 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.6474   -0.7086   -0.7461 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.7227    1.5434    1.0810 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.5028    0.0682    1.6716 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.2215   -0.4300    1.8193 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.9214   -1.3562    0.4416 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.9477    0.5656   -1.0784 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0114    1.0298    0.3870 H   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.0193   -1.5675   -1.1996 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.4740   -1.5333    0.5365 H   0  0  0  0  0  0  0  0  0  0  0  0\n    2.2174    1.0460    0.4175 H   0  0  0  0  0  0  0  0  0  0  0  0\n    2.2851   -0.6215    1.1461 H   0  0  0  0  0  0  0  0  0  0  0  0\n    4.1682    0.5141   -1.0047 H   0  0  0  0  0  0  0  0  0  0  0  0\n    4.2679   -1.1450   -0.2547 H   0  0  0  0  0  0  0  0  0  0  0  0\n    4.4432    1.3854    1.0113 H   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\n  1 10  1  0\n  1 11  1  0\n  1 12  1  0\n  2 13  1  0\n  2 14  1  0\n  3 15  1  0\n  3 16  1  0\n  4 17  1  0\n  4 18  1  0\n  5 19  1  0\n  5 20  1  0\n  7 21  1  0\n  7 22  1  0\n  8 23  1  0\n  8 24  1  0\n  9 25  1  0\nM  END\n$$$$\n'
      );
    mol.delete();
  });

  it('2D generation', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.compute2DCoords();
    mol
      .sdwriteConfs()
      .should.equal(
        '\n     RDKit          2D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.2990    0.7500    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.5981   -0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.8971    0.7500    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    5.1962   -0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    6.4952    0.7500    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    7.7942   -0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    9.0933    0.7500    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   10.3923   -0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n'
      );
    mol.delete();
  });

  it('2D Drawing', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol
      .Drawing2D()
      .should.equal(
        "<?xml version='1.0' encoding='iso-8859-1'?>\n<svg:svg version='1.1' baseProfile='full'\n              xmlns:svg='http://www.w3.org/2000/svg'\n                      xmlns:rdkit='http://www.rdkit.org/xml'\n                      xmlns:xlink='http://www.w3.org/1999/xlink'\n                  xml:space='preserve'\nwidth='300px' height='300px' >\n<svg:rect style='opacity:1.0;fill:#FFFFFF;stroke:none' width='300' height='300' x='0' y='0'> </svg:rect>\n<svg:path d='M 13.6364,140.943 45.0092,159.057' style='fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1' />\n<svg:path d='M 45.0092,159.057 76.3821,140.943' style='fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1' />\n<svg:path d='M 76.3821,140.943 107.755,159.057' style='fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1' />\n<svg:path d='M 107.755,159.057 139.128,140.943' style='fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1' />\n<svg:path d='M 139.128,140.943 151.995,148.372' style='fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1' />\n<svg:path d='M 151.995,148.372 164.862,155.801' style='fill:none;fill-rule:evenodd;stroke:#FF0000;stroke-width:2px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1' />\n<svg:path d='M 176.14,155.801 189.007,148.372' style='fill:none;fill-rule:evenodd;stroke:#FF0000;stroke-width:2px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1' />\n<svg:path d='M 189.007,148.372 201.873,140.943' style='fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1' />\n<svg:path d='M 201.873,140.943 233.246,159.057' style='fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1' />\n<svg:path d='M 233.246,159.057 243.704,153.019' style='fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1' />\n<svg:path d='M 243.704,153.019 254.162,146.981' style='fill:none;fill-rule:evenodd;stroke:#FF0000;stroke-width:2px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1' />\n<svg:text x='164.862' y='163.819' style='font-size:12px;font-style:normal;font-weight:normal;fill-opacity:1;stroke:none;font-family:sans-serif;text-anchor:start;fill:#FF0000' ><svg:tspan>O</svg:tspan></svg:text>\n<svg:text x='253.747' y='145.706' style='font-size:12px;font-style:normal;font-weight:normal;fill-opacity:1;stroke:none;font-family:sans-serif;text-anchor:start;fill:#FF0000' ><svg:tspan>OH</svg:tspan></svg:text>\n</svg:svg>\n"
      );
    mol.delete();
  });
});

// molecule manipulation & cleaning, ...
describe('molecule manipulation & cleaning', function() {
  it('addHs', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.addHs();
    mol
      .toMolfile()
      .should.equal(
        '\n     RDKit          \n\n 25 24  0  0  0  0  0  0  0  0999 V2000\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\n  1 10  1  0\n  1 11  1  0\n  1 12  1  0\n  2 13  1  0\n  2 14  1  0\n  3 15  1  0\n  3 16  1  0\n  4 17  1  0\n  4 18  1  0\n  5 19  1  0\n  5 20  1  0\n  7 21  1  0\n  7 22  1  0\n  8 23  1  0\n  8 24  1  0\n  9 25  1  0\nM  END\n$$$$\n'
      );
    mol.delete();
  });

  it('removeHs', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.removeHs();
    mol
      .toMolfile()
      .should.equal(
        '\n     RDKit          \n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n'
      );
    mol.delete();
  });

  it('sanitizeMol', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.sanitizeMol();
    mol
      .toMolfile()
      .should.equal(
        '\n     RDKit          \n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n'
      );
    mol.delete();
  });

  it('cleanUp', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.cleanUp();
    mol
      .toMolfile()
      .should.equal(
        '\n     RDKit          \n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n'
      );
    mol.delete();
  });

  it('Kekulize', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.Kekulize();
    mol
      .toMolfile()
      .should.equal(
        '\n     RDKit          \n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n'
      );
    mol.delete();
  });
});

describe('SubStructures search', function() {
  it('getSubstructMatches', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    var smilesref = 'CO';
    var d = mol.GetSubstructMatches(smilesref);
    var dlen = d.size();
    var e = [];
    for (var j = 0; j < dlen; j++) {
      e.push(d.get(j));
    }

    e.should.eql([4, 5, 6, 5, 7, 8]);
    mol.delete;
  });

  it('HasSubstructMatchStr', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    var smilesref = 'CO';
    mol.HasSubstructMatchStr(smilesref).should.equal(true);
    mol.delete;
  });
});

describe('Properties access', function() {
  it('set & getProp', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.setProp('prop1', 'rdkitjstest');
    mol.getProp('prop1').should.equal('rdkitjstest');
  });

  it('hasProp', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.setProp('prop1', 'rdkitjstest');
    mol.hasProp('prop1').should.equal(true);
    mol.hasProp('prop2').should.equal(false);
  });

  it.skip('getproplist', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    mol.setProp('prop1', 'rdkitjstest');
    mol.getproplist().should.equal('');
  });
});

describe('Similarity checks', function() {
  it('Tanimoto', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    var smilesref = 'CCCCCOC';
    mol.TanimotoSimilarityfromSmile(smilesref).should.equal(0.4666666666666667);
    mol.delete();
  });

  it('Dice', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    var smilesref = 'CCCCCOC';
    mol.DiceSimilarityfromSmile(smilesref).should.equal(0.6363636363636364);
    mol.delete();
  });

  it('Tversky', function() {
    var smi = 'CCCCCOC(CO)';
    var mol = RDKit.Molecule.fromSmiles(smi);
    var smilesref = 'CCCCCOC';
    mol
      .TverskySimilarityfromSmile(smilesref, 2, 1)
      .should.equal(0.34146341463414637);
    mol.delete();
  });
});

// atom & bond manipulations
describe('new molecule using atom bond', function() {
  it('create molecule and add atoms and bonds', function() {
    var t = RDKit.Molecule.newmolecule();
    t.addAtom(6);
    t.addAtom(6);
    t.addAtom(6);
    t.addAtom(6);
    t.addAtom(6);
    t.addAtom(8);
    t.addBond(0, 1, 1);
    t.addBond(1, 2, 2);
    t.addBond(2, 3, 1);
    t.addBond(3, 4, 1);
    t.addBond(4, 5, 1);
    t.toSmiles().should.equal('CC=CCCO');
    t.delete();
  });
  // this is in development stage caution not working for the moment!!!!

  it.skip('setBondDir', function() {
    setBondDir(Bondid, bonddirid);
  });
});

describe.skip('getPath', function() {
  it('should work', function() {
    var p = RDKit.molecule.getPath();
    p.should.equal('');
    p.delete();
  });
});

describe.skip('findSSSR', function() {
  it('should work', function() {
    findSSSR(res);
  });
});
