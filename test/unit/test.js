'use strict';

var RDKit = require('../rdkit');

describe('RDKit loading', function () {
    it('JS functions Hello', function () {
        RDKit.hello.should.equal('world');

    });
});

    // static constructors
//    newmolecule();
describe('Molecule Creations', function () {
    it('Murko', function () {
        var smi = 'C1CCCC1OC(CO)';
        var murcko = RDKit.Molecule.MurckofromSmiles(smi);
        murcko.sdwrite().should.equal('\n     RDKit          \n\n  5  5  0  0  0  0  0  0  0  0999 V2000\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  1  1  0\nM  END\n$$$$\n');
        murcko.delete();
    });


    it.skip('Mol2BlockToMol', function () {
        var molBlock = 'C1CCCC1OC(CO)';
        var mol = RDKit.Molecule.Mol2BlockToMol(molBlock);
        mol.sdwrite().should.equal();
        mol.delete();
    });

    it('MolBlockToMol', function () {
        var molBlock = '\n     RDKit          \n\n  9  9  0  0  0  0  0  0  0  0999 V2000\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\n  5  1  1  0\nM  END\n$$$$\n';
        var mol = RDKit.Molecule.MolBlockToMol(molBlock);
        mol.smilewrite().should.equal('OCCOC1CCCC1 0\n');
        mol.delete();

    });

    it.skip('fromSmarts', function () {
        var smarts ='';
        var mol = RDKit.Molecule.fromSmarts(smarts);
        mol.sdwrite().should.equal();
        mol.delete();
    });

  it('fromSmiles', function () {
        var smi = 'C1CCCC1OC(CO)';
        var mol = RDKit.Molecule.fromSmiles(smi);
        mol.sdwrite().should.equal('\n     RDKit          \n\n  9  9  0  0  0  0  0  0  0  0999 V2000\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\n  5  1  1  0\nM  END\n$$$$\n');
        mol.delete();
   });

    it('molFromPickle', function () {
        var pickle='ï¾­Þ\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\u0006\u0000`\u0000\u0000\u0000\u0003\u0001\b\u0000 \u0000\u0000\u0000\u0002\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\b\u0000`\u0000\u0000\u0000\u0001\u0001\u000b\u0000\u0001\u0000\u0001\u0002\u0000\u0002\u0003\u0000\u0003\u0004\u0000\u0004\u0005\u0000\u0005\u0006\u0000\u0006\u0007\u0000\u0007\b\u0000\u0004\u0000\u0000\u0014\u0001\u0005\u0000\u0001\u0002\u0003\u0004\u0017\u0000\u0000\u0000\u0000\u0016';
        var mol = RDKit.Molecule.molFromPickle(pickle);
        mol.sdwrite().should.equal('\n     RDKit          \n\n  9  9  0  0  0  0  0  0  0  0999 V2000\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.0000    0.0000    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\n  5  1  1  0\nM  END\n$$$$\n');
        mol.delete();
    });


        // Pickle molecule representation
    it('MolToBinary', function () {
         var smi = 'C1CCCC1OC(CO)';
        var mol = RDKit.Molecule.fromSmiles(smi);
        var p= mol.MolToBinary();
        p.should.equal('ï¾­Þ\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\t\u0000\u0000\u0000\u0001\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\u0006\u0000`\u0000\u0000\u0000\u0003\u0001\b\u0000 \u0000\u0000\u0000\u0002\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\u0006\u0000`\u0000\u0000\u0000\u0002\u0002\b\u0000`\u0000\u0000\u0000\u0001\u0001\u000b\u0000\u0001\u0000\u0001\u0002\u0000\u0002\u0003\u0000\u0003\u0004\u0000\u0004\u0005\u0000\u0005\u0006\u0000\u0006\u0007\u0000\u0007\b\u0000\u0004\u0000\u0000\u0014\u0001\u0005\u0000\u0001\u0002\u0003\u0004\u0017\u0000\u0000\u0000\u0000\u0016');
        mol.delete();
    });

});



describe.skip('Compute all descriptors', function () {
    it('calc_all_desc', function () {
		var smi = 'CCCCCOC(CO)';
		var mol = RDKit.Molecule.fromSmiles(smi);	
		var c = RDKit.calc_all_desc(mol);
        c.should.equal('');
        mol.delete();
    });
});


describe('FingerPrints', function () { 
    it('getRDKFP', function () {
        var smi = 'CCCCCOC(CO)';
        var mol = RDKit.Molecule.fromSmiles(smi);   
        mol.getRDKFP().should.equal
        mol.delete();
    });

    it('getMorganFP', function () {
        var smi = 'CCCCCOC(CO)';
        var mol = RDKit.Molecule.fromSmiles(smi);   
        mol.getMorganFP(2,2048).should.equal
        mol.delete();
    });


    it('getMorganFP_GetOnBits', function () {
        var smi = 'CCCCCOC(CO)';
        var mol = RDKit.Molecule.fromSmiles(smi);   
        var mpf2 = mol.getMorganFP_GetOnBits(2,2048);
        var mpf = [];
        var mpflen = mpf2.size();
        for(var j=0;j < mpflen;j++){
                mpf.push(mpf2.get(j));
            }
        mpf.should.equal('[ 13, 80, 222, 294, 473, 591, 691, 695, 794, 807, 1057, 1069, 1249, 1325, 1369, 1444, 1911, 1992 ]');
        mol.delete();
    });
    

    it('getLayeredFP', function () {
        var smi = 'CCCCCOC(CO)';
        var mol = RDKit.Molecule.fromSmiles(smi);   
        mol.getLayeredFP(2,2,2048).should.equal
        mol.delete();
    });


    it('getMACCSFP', function () {
        var smi = 'CCCCCOC(CO)';
        var mol = RDKit.Molecule.fromSmiles(smi);   
        mol.getMACCSFP().should.equal('00000000000000000000000000000000000000000000000000000000000000000000000010000000001000100001000000000000100011000011101000000010110010000011000000010000010101011000100');
        mol.delete();
    });

   
    it('getPatternFP', function () {
        var smi = 'CCCCCOC(CO)';
        var mol = RDKit.Molecule.fromSmiles(smi);   
        mol.getPatternFP().should.equal
        mol.delete();
    });
});

    
    
    
    // 3D Force Field minimization
describe('3D Force Field minimization', function () {
    it('MMFFoptimizeMolecule', function () {
        var smi = 'CCCCCOC(CO)';
        var mol = RDKit.Molecule.fromSmiles(smi);  
        mol.addHs(); 
        mol.EmbedMolecule();
        mol.MMFFoptimizeMolecule();
        mol.removeHs()
        mol.sdwrite().should.equal('\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n    3.1421    1.8386   -0.4923 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.6872    0.3939   -0.6248 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.2560    0.2090   -0.1205 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.8032   -1.2480   -0.2553 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.6112   -1.4612    0.2765 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.5285   -0.7132   -0.5206 O   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.8815   -0.8099   -0.0574 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.1425    0.2334    1.0272 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.8418    1.5355    0.5278 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n');
        mol.delete();
    });

    it('MMFFoptimizeMolecule with paramaters', function () {
        var smi = 'CCCCCOC(CO)';
        var mol = RDKit.Molecule.fromSmiles(smi);  
        mol.addHs(); 
        mol.EmbedMolecule();    
        mol.MMFFoptimizeMoleculearg(1000, 'MMFF94');
        mol.removeHs()
        mol.sdwrite().should.equal('\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n   -3.8778    0.3120   -0.5134 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.0248   -0.5928    0.3621 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.6103   -0.0585    0.5998 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.7594   -0.0088   -0.6737 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.6675    0.4592   -0.3946 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.3211   -0.4950    0.4391 O   0  0  0  0  0  0  0  0  0  0  0  0\n    2.6477   -0.1175    0.8000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.6604   -0.4181   -0.3038 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.9785   -0.0672    0.1025 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n');
        mol.delete();
    });


    it.skip('MMFFOptimizeMoleculeConfs', function () {
        var smi = 'CCCCCOC(CO)';
        var mol = RDKit.Molecule.fromSmiles(smi);  
        mol.addHs(); 
        mol.EmbedMultipleConfs();   
        mol.MMFFOptimizeMoleculeConfs(1,1000,'MMFF94');
        mol.removeHs()
        mol.sdwriteConfs().should.equal('\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n   -3.8778    0.3120   -0.5134 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.0248   -0.5928    0.3621 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.6103   -0.0585    0.5998 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.7594   -0.0088   -0.6737 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.6675    0.4592   -0.3946 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.3211   -0.4950    0.4391 O   0  0  0  0  0  0  0  0  0  0  0  0\n    2.6477   -0.1175    0.8000 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.6604   -0.4181   -0.3038 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.9785   -0.0672    0.1025 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n   -3.2653    0.7053   -0.8286 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.9961   -0.7419   -0.4464 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.8449   -0.9078    0.5479 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.4858   -0.5070   -0.0261 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.6424   -0.7889    0.9647 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.9191   -0.5177    0.3852 O   0  0  0  0  0  0  0  0  0  0  0  0\n    2.2725    0.8709    0.4265 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.6688    1.0146   -0.1708 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.5997    0.2501    0.5941 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n   -3.3387    1.3955    0.2106 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.9763    0.1028    0.9251 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.4943   -0.2623    0.8129 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.0580   -0.5868   -0.6196 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.3842   -1.0836   -0.6818 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.2596   -0.0469   -0.2423 O   0  0  0  0  0  0  0  0  0  0  0  0\n    2.6231   -0.4607   -0.2688 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.5118    0.6978    0.1703 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.8765    0.2991    0.2279 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n    3.5882   -0.5698   -0.4451 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.1051    0.6831    0.2689 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.5858    0.8630    0.2262 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.8263   -0.2240    0.9939 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.6736    0.0576    1.0562 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.2096    0.0390   -0.2649 O   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.6014    0.3434   -0.3157 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.4747   -0.8609    0.0327 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -4.8568   -0.5357   -0.0656 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n    4.2044   -0.3659    0.2509 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.8251   -0.6455   -0.3244 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.7219   -0.0553    0.5536 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.3374   -0.3388   -0.0274 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.7677    0.2489    0.8473 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.0603   -0.1175    0.3638 O   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.5114    0.7076   -0.7182 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.9153    0.2493   -1.1002 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -4.7884    0.3910    0.0196 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n    3.9019    0.0239   -0.6566 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.5874   -0.0404    0.1064 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.6824   -1.1475   -0.4350 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.3940   -1.3244    0.3690 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.5451   -0.1244    0.2967 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.7415   -0.4577    1.0006 O   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.6940    0.6030    1.0299 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.5126    0.6851   -0.2576 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -4.4772    1.7289   -0.1843 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n   -4.0079    0.8684   -0.0944 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.0305   -0.1168    0.5266 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.5830    0.3406    0.3454 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.6034   -0.6549    0.9740 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.8479   -0.2019    0.8370 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.1974   -0.1571   -0.5446 O   0  0  0  0  0  0  0  0  0  0  0  0\n    2.5245    0.3083   -0.7784 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.5711   -0.7851   -0.5701 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.8796   -0.3001   -0.8496 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n    1.7897    1.3850   -0.3012 C   0  0  0  0  0  0  0  0  0  0  0  0\n    2.2862    0.0698    0.2801 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.9988   -1.1263   -0.6303 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.7918   -1.9830   -0.2259 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.5643   -1.2902   -0.3304 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.7586   -0.4419    0.7989 O   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.0791    0.0960    0.8770 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.2667    1.3109   -0.0276 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.5947    1.8071    0.0885 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n   -3.2996   -1.5880   -0.2238 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.6363   -0.3859    0.4294 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.3305   -0.0157   -0.2742 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.6670    1.1949    0.3877 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.6160    1.6175   -0.3281 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.5663    0.5580   -0.4304 O   0  0  0  0  0  0  0  0  0  0  0  0\n    2.2743    0.3139    0.7917 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.3031   -0.7798    0.5231 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.2106   -0.3475   -0.4896 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n    3.4491    0.7971    0.7431 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.0648   -0.6316    0.3909 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.5532   -0.8699    0.3692 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.8339   -0.0910   -0.7370 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.6467   -0.4556   -0.8277 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.2950   -0.0866    0.3857 O   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.6828   -0.4352    0.4247 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.5661    0.5542   -0.3394 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -3.6145    1.8067    0.3394 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n');
        mol.delete();
    });


    it('UFFOptimizeMolecule', function () {
        var smi = 'CCCCCOC(CO)';
        var mol = RDKit.Molecule.fromSmiles(smi);  
        mol.addHs(); 
        mol.EmbedMolecule(); 
        mol.UFFOptimizeMolecule();
        mol.removeHs()
        mol.sdwrite().should.equal('\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n   -3.2713    0.4667   -1.0876 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.9791   -0.8786   -0.4235 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.8749   -0.7887    0.6411 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.4844   -0.5591    0.0307 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.6043   -0.5961    1.1078 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.8803   -0.4433    0.5144 O   0  0  0  0  0  0  0  0  0  0  0  0\n    2.3128    0.8990    0.6042 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.6179    1.0667   -0.1689 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.6397    0.3074    0.4191 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n');
        mol.delete();
    });


    it('EmbedMolecule', function () {
        var smi = 'CCCCCOC(CO)';
        var mol = RDKit.Molecule.fromSmiles(smi);  
        mol.addHs(); 
        mol.EmbedMoleculearg(1000,1);
        mol.removeHs()
        mol.sdwrite().should.equal('\n     RDKit          3D\n\n  9  8  0  0  0  0  0  0  0  0999 V2000\n   -3.4616    1.4289    0.4314 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.9477    0.0284    0.1317 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.4668    0.0949   -0.1176 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -0.8657   -1.2686    0.0740 C   0  0  0  0  0  0  0  0  0  0  0  0\n    0.6165   -1.2723   -0.1495 C   0  0  0  0  0  0  0  0  0  0  0  0\n    1.2728   -0.1862    0.4022 O   0  0  0  0  0  0  0  0  0  0  0  0\n    2.6359   -0.3660    0.1169 C   0  0  0  0  0  0  0  0  0  0  0  0\n    3.3801    0.9281    0.0006 C   0  0  0  0  0  0  0  0  0  0  0  0\n    4.5567    0.7909    0.7537 O   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0\n  2  3  1  0\n  3  4  1  0\n  4  5  1  0\n  5  6  1  0\n  6  7  1  0\n  7  8  1  0\n  8  9  1  0\nM  END\n$$$$\n');
        mol.delete();
    });

});    





/*
    
    

    
    
  
describe('', function () {
    it('should work', function () {
        RDKit.  getPath();

    });
});

      describe('', function () {
    it('should work', function () {

    smilewrite();

    });
});

  describe('', function () {
    it('should work', function () {
sdwriteConfs();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.
    compute2DCoords();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.    
    Drawing2D();
       });
}); 
    // similarity

describe('', function () {
    it('should work', function () {
        RDKit.
    TanimotoSimilarityfromSmile (smilesref);
    });
});
describe('', function () {
    it('should work', function () {
        RDKit.
    DiceSimilarityfromSmile (smilesref);
    });
});
describe('', function () {
    it('should work', function () {
        RDKit.
    TverskySimilarityfromSmile( smilesref,a, b);
        });
});
describe('', function () {
    it('should work', function () {
        RDKit.
    findSSSR(res);
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.
    AlignMolConformers();
    });
});
describe('', function () {
    it('should work', function () {
        RDKit.
    AlignMol(smilesref);
        });
});

    // molecule manipulation & cleaning, ...
describe('', function () {
    it('should work', function () {
        RDKit.
    addHs();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.
    removeHs();
    });
});


  describe('', function () {
    it('should work', function () {
sanitizeMol();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.
    cleanUp();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.
    Kekulize();
    });
});

    
    // descriptors
    describe('', function () {
    it('should work', function () {
describe('', function () {
    it('should work', function () {
        RDKit.  getMW();

    });
});

describe('', function () {
    it('should work', function () {
        RDKit.ExactMW();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.Formula();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.Chi0v();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.Chi1v();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.Chi2v();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.Chi3v();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.Chi4v();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.Chi0n();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.Chi1n();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.Chi2n();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.Chi3n();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.Chi4n();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.HallKierAlpha();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.Kappa1();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.Kappa2();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.Kappa3();
    });
});

describe('', function () {
    it('should work', function () {
        RDKit.logp_mr();
    });
});

    
    
describe('', function () {
    it('should work', function () {
    LipinskiHBA();
});
});

describe('', function () {
    it('should work', function () {
    LipinskiHBD();
});
});

describe('', function () {
    it('should work', function () {
    NumRotatableBonds();
});
});

describe('', function () {
    it('should work', function () {
    NumHBD();
});
});

describe('', function () {
    it('should work', function () {
    NumHBA();
});
});

describe('', function () {
    it('should work', function () {
    NumHeteroatoms();
});
});

describe('', function () {
    it('should work', function () {
    NumAmideBonds();
});
});

    FractionCSP3();
describe('', function () {
    it('should work', function () {
    NumRings();
});
});

describe('', function () {
    it('should work', function () {
    NumAromaticRings();
});
});

describe('', function () {
    it('should work', function () {
    NumAliphaticRings();
});
});

describe('', function () {
    it('should work', function () {
    NumSaturatedRings();
});
});

describe('', function () {
    it('should work', function () {
    NumHeterocycles();
});
});

describe('', function () {
    it('should work', function () {
    NumAromaticHeterocycles();
});
});

describe('', function () {
    it('should work', function () {
    NumAromaticCarbocycles ();
});
});

describe('', function () {
    it('should work', function () {
    NumSaturatedHeterocycles();
});
});

describe('', function () {
    it('should work', function () {
    NumSaturatedCarbocycles();
});
});

describe('', function () {
    it('should work', function () {
    NumAliphaticHeterocycles();
});
});

describe('', function () {
    it('should work', function () {
    NumAliphaticCarbocycles();
});
});

describe('', function () {
    it('should work', function () {
    LabuteASA();
});
});

    
    TPSA();
  describe('', function () {
    it('should work', function () {
SlogP_VSA();
});
});
  describe('', function () {
    it('should work', function () {
SMR_VSA();
});
});

   describe('', function () {
    it('should work', function () {
    PEO_VSA();
});
});

describe('', function () {
    it('should work', function () {
        RDKit.
    MQNs();
});
});


describe('', function () {
    it('should work', function () {
        RDKit.  getSubstructMatches(smilesref);
    });
});


describe('', function () {
    it('should work', function () {

    HasSubstructMatchStr(smilesref);
    });
});    

  

describe('', function () {
    it('should work', function () {
        RDKit.  getProp(key);
    });
});



  describe('', function () {
    it('should work', function () {
setProp(key, value);
});
});
    describe('', function () {
    it('should work', function () {
describe('', function () {
    it('should work', function () {
        RDKit.  getNumAtoms();

    });
});

    describe('', function () {
    it('should work', function () {
describe('', function () {
    it('should work', function () {
        RDKit.  getNumConformers();
    });
});


describe('', function () {
    it('should work', function () {
        RDKit.  getConformer(id);
    });
});


 describe('', function () {
    it('should work', function () {
     hasProp(key);
    });
});   


describe('', function () {
    it('should work', function () {
        RDKit.  getproplist();
    });
});


    
    
    
    // atom & bond manipulations
  describe('', function () {
    it('should work', function () {
    addAtom (atomid);
    });
});
    // this is in development stage caution not working for the moment!!!!
    describe('', function () {
    it('should work', function () {
    addBond (beginAtomIdx, endAtomIdx,bondtypeid);
    });
});


  describe('', function () {
    it('should work', function () {
setBondDir (Bondid, bonddirid);
});
});
    

*/
